use rusqlite::{Connection, Result, params};
use crate::models::{Setting, SettingValueType};

pub fn migrate(conn: &mut Connection) -> Result<()> {
    // SystemSettings section
    let settings = vec![
        Setting {
            name: "r.PSOWarmup.WarmupMaterials".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables shader precompilation for materials, reducing in-game stuttering".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Loading Time".to_string(),
        },
        Setting {
            name: "r.VSync".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables vertical sync to prevent screen tearing at the cost of potential input lag".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Streaming.PoolSize".to_string(),
            section: "SystemSettings".to_string(),
            description: "Size of texture streaming pool in MB. Higher values use more VRAM but improve texture quality".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "12288".to_string(),
            default_value: "12288".to_string(),
            min_value: Some("1024".to_string()),
            max_value: Some("16384".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "niagara.CreateShadersOnLoad".to_string(),
            section: "SystemSettings".to_string(),
            description: "Creates Niagara particle shaders on load to reduce stuttering during gameplay".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.OneFrameThreadLag".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables one frame thread lag for improved performance at the cost of input latency".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.TemporalAACurrentFrameWeight".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls the weight of the current frame in temporal anti-aliasing. Higher values reduce ghosting but may introduce more aliasing".to_string(),
            value_type: SettingValueType::Float,
            current_value: "0.15".to_string(),
            default_value: "0.15".to_string(),
            min_value: Some("0.0".to_string()),
            max_value: Some("1.0".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.TemporalAASamples".to_string(),
            section: "SystemSettings".to_string(),
            description: "Number of temporal AA samples. Higher values improve anti-aliasing quality at the cost of performance".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "8".to_string(),
            default_value: "8".to_string(),
            min_value: Some("4".to_string()),
            max_value: Some("64".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.TemporalAASharpness".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls the sharpness of temporal anti-aliasing. Higher values produce sharper images but may introduce more aliasing".to_string(),
            value_type: SettingValueType::Float,
            current_value: "0.9".to_string(),
            default_value: "0.9".to_string(),
            min_value: Some("0.0".to_string()),
            max_value: Some("1.0".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Tonemapper.Sharpen".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls image sharpening in the tonemapper. Higher values produce sharper images but may enhance noise".to_string(),
            value_type: SettingValueType::Float,
            current_value: "0.8".to_string(),
            default_value: "0.8".to_string(),
            min_value: Some("0.0".to_string()),
            max_value: Some("1.0".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.RHICmdBypass".to_string(),
            section: "SystemSettings".to_string(),
            description: "Bypasses the RHI command list for potentially improved performance on some hardware".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.GPUCrashDebugging".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables GPU crash debugging features".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.AllowMultiThreadedShaderCreation".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables multithreaded shader creation for improved loading times on multi-core CPUs".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.TextureStreaming.MinTextureResidentMipCount".to_string(),
            section: "SystemSettings".to_string(),
            description: "Minimum number of mip levels to keep resident in memory".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "7".to_string(),
            default_value: "7".to_string(),
            min_value: Some("1".to_string()),
            max_value: Some("12".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Streaming.HLODStrategy".to_string(),
            section: "SystemSettings".to_string(),
            description: "Strategy for streaming hierarchical level of detail".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "2".to_string(),
            default_value: "2".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("2".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Streaming.LimitPoolSizeToVRAM".to_string(),
            section: "SystemSettings".to_string(),
            description: "Limits texture streaming pool size to available VRAM".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Streaming.MipBias".to_string(),
            section: "SystemSettings".to_string(),
            description: "Bias for texture mip level selection. Higher values use lower resolution textures".to_string(),
            value_type: SettingValueType::Float,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: Some("-2.0".to_string()),
            max_value: Some("2.0".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.RenderTargetPoolMin".to_string(),
            section: "SystemSettings".to_string(),
            description: "Minimum size of render target pool in MB".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "400".to_string(),
            default_value: "400".to_string(),
            min_value: Some("100".to_string()),
            max_value: Some("1000".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.GTSyncType".to_string(),
            section: "SystemSettings".to_string(),
            description: "Graphics-Thread synchronization type".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("2".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.EarlyZPass".to_string(),
            section: "SystemSettings".to_string(),
            description: "Early Z-pass rendering mode. Higher values improve performance but may cause visual artifacts".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "2".to_string(),
            default_value: "2".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("3".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.AllowOcclusionQueries".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables occlusion queries for improved performance".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.GBufferFormats".to_string(),
            section: "SystemSettings".to_string(),
            description: "G-buffer format configuration. Higher values use more memory but improve visual quality".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "3".to_string(),
            default_value: "3".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("5".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.AsyncCompute".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables asynchronous compute shaders for improved GPU utilization on supported hardware".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.UseAsyncShaderPrecompilation".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables asynchronous shader precompilation to reduce hitching during gameplay".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Streaming.DefragDynamicBounds".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables defragmentation of dynamic texture streaming bounds for improved memory usage".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Streaming.UseAllMips".to_string(),
            section: "SystemSettings".to_string(),
            description: "Forces the streaming system to use all mip levels, improving texture quality at the cost of memory".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Tonemapper.GrainQuantization".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls film grain quantization in the tonemapper. Higher values produce more visible grain".to_string(),
            value_type: SettingValueType::Float,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: Some("0.0".to_string()),
            max_value: Some("1.0".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.FilmGrain".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables film grain effect. 0 disables the effect, higher values increase intensity".to_string(),
            value_type: SettingValueType::Float,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: Some("0.0".to_string()),
            max_value: Some("1.0".to_string()),
            impact: "Visual Quality".to_string(),
        },
        // D3D12 settings
        Setting {
            name: "D3D12.MaximumFrameLatency".to_string(),
            section: "SystemSettings".to_string(),
            description: "Maximum frame latency for D3D12 renderer".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "3".to_string(),
            default_value: "3".to_string(),
            min_value: Some("1".to_string()),
            max_value: Some("6".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "D3D12.AsyncDeferredDeletion".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables asynchronous deferred deletion for D3D12 renderer".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "D3D12.AFRUseFramePacing".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables frame pacing for Alternate Frame Rendering in D3D12".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        // D3D11 settings
        Setting {
            name: "D3D11.MaximumFrameLatency".to_string(),
            section: "SystemSettings".to_string(),
            description: "Maximum frame latency for D3D11 renderer".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "3".to_string(),
            default_value: "3".to_string(),
            min_value: Some("1".to_string()),
            max_value: Some("6".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "D3D11.AsyncDeferredDeletion".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables asynchronous deferred deletion for D3D11 renderer".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "D3D11.AFRUseFramePacing".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables frame pacing for Alternate Frame Rendering in D3D11".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        // Garbage collection settings
        Setting {
            name: "gc.FlushStreamingOnGC".to_string(),
            section: "SystemSettings".to_string(),
            description: "Flushes texture streaming during garbage collection".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "gc.NumRetriesBeforeForcingGC".to_string(),
            section: "SystemSettings".to_string(),
            description: "Number of retries before forcing garbage collection".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "5".to_string(),
            default_value: "5".to_string(),
            min_value: Some("1".to_string()),
            max_value: Some("10".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "gc.IncrementalBeginDestroyEnabled".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables incremental begin destroy for garbage collection".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "gc.SizeOfPermanentObjectPool".to_string(),
            section: "SystemSettings".to_string(),
            description: "Size of permanent object pool for garbage collection".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "10000".to_string(),
            default_value: "10000".to_string(),
            min_value: Some("1000".to_string()),
            max_value: Some("100000".to_string()),
            impact: "Performance".to_string(),
        },
        // Nanite settings
        Setting {
            name: "r.Nanite.AutoShaderCulling".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables automatic shader culling for Nanite geometry".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Nanite.DisocclusionHack".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables disocclusion hack for Nanite geometry".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Nanite.ProgrammableRaster.Shadows".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables programmable raster shadows for Nanite geometry".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Nanite.Streaming.Imposters".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables streaming imposters for Nanite geometry".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Shadow.NaniteLODBias".to_string(),
            section: "SystemSettings".to_string(),
            description: "LOD bias for Nanite shadows".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "8".to_string(),
            default_value: "8".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("16".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Shadow.NaniteUseHZB".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables HZB for Nanite shadows".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.Shadow.Virtual.NonNaniteVSM".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables virtual shadow maps for non-Nanite geometry".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        // FastVRam settings
        Setting {
            name: "r.FastVRam.ShadowPerObject".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables fast VRAM for per-object shadows".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.FastVRam.ShadowPointLight".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables fast VRAM for point light shadows".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.FastVRam.PostProcessMaterial".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables fast VRAM for post-process materials".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.FastVRam.Tonemap".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables fast VRAM for tonemapping".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.OptimizedWPO".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables optimized world position offset".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        // FX settings
        Setting {
            name: "FX.AllowAsyncTick".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables asynchronous ticking for effects".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "FX.BatchAsync".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables asynchronous batching for effects".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "FX.BatchAsyncBatchSize".to_string(),
            section: "SystemSettings".to_string(),
            description: "Batch size for asynchronous effects processing".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "8".to_string(),
            default_value: "8".to_string(),
            min_value: Some("1".to_string()),
            max_value: Some("64".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "FX.EarlyScheduleAsync".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables early scheduling for asynchronous effects".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "AllowAsyncRenderThreadUpdates".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables asynchronous render thread updates".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "1".to_string(),
            default_value: "1".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        // Ray tracing settings
        Setting {
            name: "r.RayTracing".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables ray tracing for improved lighting and reflections".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.RayTracing.ForceAllRayTracingEffects".to_string(),
            section: "SystemSettings".to_string(),
            description: "Forces all ray tracing effects to be enabled".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.RayTracing.Shadows".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables ray-traced shadows for more realistic lighting".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.RayTracing.Reflections".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables ray-traced reflections for more realistic reflective surfaces".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.RayTracing.AmbientOcclusion".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables ray-traced ambient occlusion for more realistic shadowing in corners and crevices".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.RayTracing.GlobalIllumination".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables ray-traced global illumination for more realistic indirect lighting".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.RayTracing.Translucency".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables ray-traced translucency for more realistic transparent materials".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Lumen".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables Lumen global illumination system for dynamic, real-time indirect lighting".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Lumen.Reflections".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables Lumen reflections for dynamic, real-time reflections".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Lumen.GlobalIllumination".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables Lumen global illumination for dynamic, real-time indirect lighting".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.Lumen.HardwareRayTracing".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables hardware ray tracing for Lumen, improving quality at the cost of performance".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.SSR".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables screen space reflections for reflective surfaces".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.AmbientOcclusionLevels".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls the quality of ambient occlusion. Higher values improve quality at the cost of performance".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("3".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.ShadowQuality".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls the quality of shadows. Higher values improve quality at the cost of performance".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "2".to_string(),
            default_value: "2".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("5".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.VolumetricFog".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables volumetric fog for more realistic atmospheric effects".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.DistanceFieldShadows".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables distance field shadows for more accurate shadowing at a distance".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.HZBOcclusion".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables hierarchical Z-buffer occlusion for improved performance".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.MotionBlurQuality".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls the quality of motion blur. Higher values improve quality at the cost of performance".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("4".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.SceneRenderTargetResizeMethod".to_string(),
            section: "SystemSettings".to_string(),
            description: "Method used to resize scene render targets".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "2".to_string(),
            default_value: "2".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("2".to_string()),
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.BufferVisualizationDumpFrames".to_string(),
            section: "SystemSettings".to_string(),
            description: "Enables dumping of buffer visualization frames for debugging".to_string(),
            value_type: SettingValueType::Boolean,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: None,
            max_value: None,
            impact: "Performance".to_string(),
        },
        Setting {
            name: "r.DepthOfFieldQuality".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls the quality of depth of field effect. Higher values improve quality at the cost of performance".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("4".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.BloomQuality".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls the quality of bloom effect. Higher values improve quality at the cost of performance".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("5".to_string()),
            impact: "Visual Quality".to_string(),
        },
        Setting {
            name: "r.LensFlareQuality".to_string(),
            section: "SystemSettings".to_string(),
            description: "Controls the quality of lens flare effect. Higher values improve quality at the cost of performance".to_string(),
            value_type: SettingValueType::Integer,
            current_value: "0".to_string(),
            default_value: "0".to_string(),
            min_value: Some("0".to_string()),
            max_value: Some("3".to_string()),
            impact: "Visual Quality".to_string(),
        },
    ];

    // Insert settings into the database
    let tx = conn.transaction()?;

    for setting in settings {
        let possible_values = match &setting.value_type {
            SettingValueType::Enum(values) => Some(serde_json::to_string(values).unwrap_or_default()),
            _ => None,
        };

        let value_type_str = match setting.value_type {
            SettingValueType::Boolean => "Boolean",
            SettingValueType::Integer => "Integer",
            SettingValueType::Float => "Float",
            SettingValueType::String => "String",
            SettingValueType::Enum(_) => "Enum",
        };

        tx.execute(
            "INSERT OR REPLACE INTO settings 
             (name, section, description, value_type, default_value, min_value, max_value, impact, possible_values)
             VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9)",
            params![
                setting.name,
                setting.section,
                setting.description,
                value_type_str,
                setting.default_value,
                setting.min_value,
                setting.max_value,
                setting.impact,
                possible_values,
            ],
        )?;
    }

    tx.commit()?;
    Ok(())
}
